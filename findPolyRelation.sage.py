
# This file was *autogenerated* from the file findPolyRelation.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_8983 = Integer(8983); _sage_const_26687 = Integer(26687); _sage_const_100 = Integer(100); _sage_const_299 = Integer(299); _sage_const_27181 = Integer(27181); _sage_const_9000 = Integer(9000); _sage_const_6672 = Integer(6672)
import subprocess;

prevIOrelationFirstLine = ""
currentIOrelationFirstLine = ""
def appendResults(data,type):
    with open('IOrelations.txt') as fpr:
        #check if results are same as last round, i,e,. no poly relation found
        global prevIOrelationFirstLine
        currentIOrelationFirstLine = fpr.readline()
        print("prev: "+prevIOrelationFirstLine)
        print("curr: "+currentIOrelationFirstLine)
        if currentIOrelationFirstLine == prevIOrelationFirstLine:
            print("\nNo relation")
            return
        prevIOrelationFirstLine = currentIOrelationFirstLine
        fpr.seek(_sage_const_0 ) #set fpr pointer back to start of file

        print("\nResults new - appending to results\n")
        #save each results
        res = []
        for line in fpr:
            res.append(line)


    #make title string
    print(data)
    if type == "ScalarMult":
        title = "\nResults for Scalar multiplication on curve: a,b,p: "+str(data[_sage_const_0 ][_sage_const_0 ])+","+str(data[_sage_const_0 ][_sage_const_1 ]) \
         +","+str(data[_sage_const_0 ][_sage_const_2 ])+" u,v,w: "+str(data[_sage_const_1 ])+","+str(data[_sage_const_2 ])+","+str(data[_sage_const_3 ])+"\n"
    elif type == "Isogeny":
        title = "\nResults for Isogency on curve: a,b,p: "+str(data[_sage_const_0 ][_sage_const_0 ])+","+str(data[_sage_const_0 ][_sage_const_1 ]) \
         +","+str(data[_sage_const_0 ][_sage_const_2 ])+" point X,Y: "+str(data[_sage_const_1 ][_sage_const_0 ])+","+str(data[_sage_const_1 ][_sage_const_1 ])+" u,v: "+str(data[_sage_const_2 ]) \
         +","+str(data[_sage_const_3 ])+"\n"

    with open('results.txt','a') as fpw:
        fpw.write(title)
        for line in res:
            fpw.write(line)

def makeCurve(curve):
    a,b,p = curve
    #catch errors for inputs that dont form curves
    try:
        E = EllipticCurve(GF(p),[a,b])
    except (ArithmeticError, ValueError) as e:
        print("Invalid parameters:",e)
        return False
    return E

#data = {[a,b,p],u,v,w,numECCcodeEntries}
def genECCCodeScalarMult(data):
    a,b,p = data[_sage_const_0 ]
    u,v,w = data[_sage_const_1 ],data[_sage_const_2 ],data[_sage_const_3 ]
    #catch errors for inputs that dont form curves
    E = makeCurve(data[_sage_const_0 ])
    if not (E):
        return False
    # generate ECC code
    o = open('ECCcode.txt','w')
    for i in range(_sage_const_0 ,data[_sage_const_4 ]):
        G = E.random_element()
        o.write(str(G[_sage_const_0 ])+","+str((u*G)[_sage_const_0 ])+","+str((v*G)[_sage_const_0 ])+","+str((w*G)[_sage_const_0 ])+"\n")

    return True

#data = {[a,b,p],[x,y],u,v,numECCcodeEntries}
def genECCCodeIsogency(data):
    a,b,p = data[_sage_const_0 ]
    point = data[_sage_const_1 ]
    u,v = data[_sage_const_2 ], data[_sage_const_3 ]
    #catch errors for inputs that dont form curves
    E = makeCurve(data[_sage_const_0 ])
    if not (E):
        return False
    #catch errors for inputs that dont form isogencys
    try:
        phi = E.isogeny(E(point))
    except TypeError:
        print("Invalid parameters.")
        return False

    #generate ECC code
    o = open('ECCcode.txt','w')
    for i in range(_sage_const_0 ,data[_sage_const_4 ]):
        G = E.random_element()
        o.write(str(G[_sage_const_0 ])+","+str((u*G)[_sage_const_0 ])+","+str((phi(G))[_sage_const_0 ])+","+str((v*phi(G))[_sage_const_0 ])+"\n")

    return True

def findPolyRealations(data,type):
    if (type == 'ScalarMult'):
        #back out of funciton if genECCCodeScalarMult returns false
        if not genECCCodeScalarMult(data):
            return
    elif (type == 'Isogeny'):
        #back out of funciton if genECCCodeIso returns false
        if not genECCCodeIsogency(data):
            return
    else:
        print("ERROR: Invalid type.")
        return

    print("\nECCCode updated, calling ax64\n")
    # call ax64
    subprocess.call("wine ax64.exe 939111 1 2 2 2 1153 ECCcode.txt",shell=True)

    #append reuslts to results.txt
    appendResults(data,type)

#clear IOrelations.txt at the beginning
fp = open('IOrelations.txt','w')
fp.write("")
fp.close()

for a in range (_sage_const_8983 ,_sage_const_9000 ):
    data = [_sage_const_0 ,a,next_prime(_sage_const_299 )],_sage_const_27181 ,_sage_const_26687 ,_sage_const_6672 ,_sage_const_100 
    print("------------------------------------------------")
    print("START")
    print("\nNew data:")
    print(data)
    findPolyRealations(data,"ScalarMult")
    print("END")
    print("------------------------------------------------")

