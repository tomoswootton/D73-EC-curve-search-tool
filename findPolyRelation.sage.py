
# This file was *autogenerated* from the file findPolyRelation.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_4 = Integer(4); _sage_const_92 = Integer(92); _sage_const_103 = Integer(103); _sage_const_98 = Integer(98); _sage_const_1000 = Integer(1000); _sage_const_32 = Integer(32)
import subprocess

def appendResults(data,type):
    with open('IOrelations.txt') as fpr:
        #check if no poly relation found, dont store in results.txt
        if fpr.readline() == "":
            print("\nNo relation")
            return
        fpr.seek(_sage_const_0 ) #set fpr pointer back to start of file

        print("\nAppending to results\n")
        #save each results
        res = []
        for line in fpr:
            res.append(line)

    #make title
    if type == "ScalarMult":
        title = "\nResults for Scalar multiplication on curve: a,b,p: "+str(data[_sage_const_0 ][_sage_const_0 ])+","+str(data[_sage_const_0 ][_sage_const_1 ]) \
        +","+str(data[_sage_const_0 ][_sage_const_2 ])+" u,v,w: "+str(data[_sage_const_1 ])+","+str(data[_sage_const_2 ])+","+str(data[_sage_const_3 ])+" relations found after filter:\n"
    elif type == "Isogeny":
        title = "\nResults for Isogency on curve: a,b,p: "+str(data[_sage_const_0 ][_sage_const_0 ])+","+str(data[_sage_const_0 ][_sage_const_1 ]) \
         +","+str(data[_sage_const_0 ][_sage_const_2 ])+" point X,Y: "+str(data[_sage_const_1 ][_sage_const_0 ])+","+str(data[_sage_const_1 ][_sage_const_1 ])+" u,v: "+str(data[_sage_const_2 ]) \
         +","+str(data[_sage_const_3 ])+" relations found after filter:\n"

    with open('results.txt','a') as fpw:
        fpw.write(title)
        for line in res:
            if filterResult(line):
                fpw.write(line)
    fpw.close()

def filterResult(line):
    if (line[-_sage_const_3 ] != "0"):
        print("BUG: line read error")
        return False
    if (line.count("+")+line.count("-") > maxNumTerms):
        return False
    for i in range(_sage_const_1 ,len(line)):
        if line[i] == "{":
            if int(line[i+_sage_const_1 ]) > maxDegree:
                return False;
    return True



def makeCurve(curve):
    a,b,p = curve
    #catch errors for inputs that dont form curves
    try:
        E = EllipticCurve(GF(p),[a,b])
    except (ArithmeticError, ValueError) as e:
        print("Invalid curve parameters:",e)
        return False
    return E

#data = {[a,b,p],u,v,w,numECCcodeEntries}
def genECCCodeScalarMult(data):
    try:
        a,b,p = data[_sage_const_0 ]
        u,v,w = data[_sage_const_1 ],data[_sage_const_2 ],data[_sage_const_3 ]
        #catch errors for inputs that dont form curves
        E = makeCurve(data[_sage_const_0 ])
        if not (E):
            return False
        # generate ECC code
        o = open('ECCcode.txt','w')
        for i in range(_sage_const_0 ,data[_sage_const_4 ]):
            G = E.random_element()
            o.write(str(G[_sage_const_0 ])+","+str((u*G)[_sage_const_0 ])+","+str((v*G)[_sage_const_0 ])+","+str((w*G)[_sage_const_0 ])+"\n")
    except (TypeError) as e:
        print("Invalid parameters:",e)
        return False

    return True


#data = {[a,b,p],[x,y],u,v,numECCcodeEntries}
def genECCCodeIsogency(data):
    try:
        a,b,p = data[_sage_const_0 ]
        point = data[_sage_const_1 ]
        u,v = data[_sage_const_2 ], data[_sage_const_3 ]
        #catch errors for inputs that dont form curves
        E = makeCurve(data[_sage_const_0 ])
        if not (E):
            return False
        #catch errors for inputs that dont form isogencys

        phi = E.isogeny(E(point))

        #generate ECC code
        o = open('ECCcode.txt','w')
        for i in range(_sage_const_0 ,data[_sage_const_4 ]):
            G = E.random_element()
            o.write(str(G[_sage_const_0 ])+","+str((u*G)[_sage_const_0 ])+","+str((phi(G))[_sage_const_0 ])+","+str((v*phi(G))[_sage_const_0 ])+"\n")
    except (TypeError) as e:
        print("Invalid parameters:",e)
        return False

    return True

def findPolyRealationsAX64(data,type):
    if (type == 'ScalarMult'):
        #back out of funciton if genECCCodeScalarMult returns false
        if not genECCCodeScalarMult(data):
            return

    elif (type == 'Isogeny'):
        #back out of function if genECCCodeIso returns false
        if not genECCCodeIsogency(data):
            return

    else:
        print("ERROR: Invalid type.")
        return

    print("\nECCCode updated, calling ax64\n")

    # call ax64
    # subprocess.call(["wine", "ax64.exe", "939111", "1 2 2 2", "1153", "ECCcode.txt"])
    subprocess.call("wine ax64.exe 939111 1 2 2 2 1153 ECCcode.txt",shell=True)

    #append reuslts to results.txt
    appendResults(data,type)

    #clear IOrelation.txt
    with open('IOrelations.txt','w') as fpw:
        fpw.write("")
    fpw.close()

maxDegree = _sage_const_4 
maxNumTerms = _sage_const_4 

findPolyRealationsAX64([[_sage_const_0 ,_sage_const_7 ,_sage_const_103 ],_sage_const_32 ,_sage_const_92 ,_sage_const_98 ,_sage_const_1000 ],"ScalarMult")
# data = [3,11,179],[152,37],6,25,1000
# findPolyRealationsAX64(data,"Isogeny")

