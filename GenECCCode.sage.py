
# This file was *autogenerated* from the file GenECCCode.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_100 = Integer(100); _sage_const_11 = Integer(11); _sage_const_17 = Integer(17); _sage_const_152 = Integer(152); _sage_const_179 = Integer(179); _sage_const_37 = Integer(37); _sage_const_25 = Integer(25)
import subprocess;

def appendResults(data,type):
    #TODO check results are new
    with open('IOrelations.txt') as fpr:
        #save each results
        res = []
        for line in fpr:
            res.append(line)


    #make title string
    print(data)
    if (type == "ScalarMult"):
        title = "\nResults for curve: a,b,p: "+str(data[_sage_const_0 ][_sage_const_0 ])+","+str(data[_sage_const_0 ][_sage_const_1 ]) \
         +","+str(data[_sage_const_0 ][_sage_const_2 ])+" u,v,w: "+str(data[_sage_const_1 ])+","+str(data[_sage_const_2 ])+","+str(data[_sage_const_3 ])+"\n"
    elif (type == "Isogeny"):
        title = "\nResults for curve: a,b,p: "+str(data[_sage_const_0 ][_sage_const_0 ])+","+str(data[_sage_const_0 ][_sage_const_1 ]) \
         +","+str(data[_sage_const_0 ][_sage_const_2 ])+" point X,Y: "+str(data[_sage_const_1 ][_sage_const_0 ])+","+str(data[_sage_const_1 ][_sage_const_1 ])+" u,v: "+str(data[_sage_const_2 ]) \
         +","+str(data[_sage_const_3 ])+"\n"

    with open('results.txt','a') as fpw:
        fpw.write(title)
        for line in res:
            fpw.write(line)

def findPolyRealations(data,type):
    print("ECCCode updated, calling ax64")
    # call ax64
    subprocess.call("wine ax64.exe 939111 1 2 2 2 1153 ECCcode.txt",shell=True)

    print("appending results")
    #append reuslts to results.txt
    appendResults(data,type)

def genECCCodeScalarMult(curve,u,v,w,numEntries):
    a,b,p = curve
    E = EllipticCurve(FiniteField(p),[a,b])
    # generate ECC code
    o = open('ECCcode.txt','w')
    for i in range(_sage_const_0 ,numEntries):
        G = E.random_element()
        o.write(str(G[_sage_const_0 ])+","+str((u*G)[_sage_const_0 ])+","+str((v*G)[_sage_const_0 ])+","+str((w*G)[_sage_const_0 ])+"\n")

def genECCCodeIsogency(curve,point,u,v,numEntries):
    a,b,p = curve
    E = EllipticCurve(GF(p),[a,b])
    phi = E.isogeny(E(point))
    #generate ECC code
    o = open('ECCcode.txt','w')
    for i in range(_sage_const_0 ,numEntries):
        G = E.random_element()
        o.write(str(G[_sage_const_0 ])+","+str((u*G)[_sage_const_0 ])+","+str((phi(G))[_sage_const_0 ])+","+str((v*phi(G))[_sage_const_0 ])+"\n")


data = [_sage_const_3 ,_sage_const_11 ,_sage_const_179 ],[_sage_const_152 ,_sage_const_37 ],_sage_const_17 ,_sage_const_25 ,_sage_const_100 
# genECCCodeScalarMult([0,7,71389],27181,26687,0,100)
genECCCodeIsogency([_sage_const_3 ,_sage_const_11 ,_sage_const_179 ],[_sage_const_152 ,_sage_const_37 ],_sage_const_17 ,_sage_const_25 ,_sage_const_100 )
findPolyRealations(data,"Isogeny")
# subprocess.call("wine ax64.exe 939111 1 2 2 2 1153 ECCcode.txt",shell=True)
# findPolyRelationScalarMult([0,7,71389],27181,26687,0,100)

# findPolyRealationsIsogency([3,11,179],[152,37],17,25,100)

